{"ast":null,"code":"var _jsxFileName = \"/home/indrajeetyadav/my-spreadsheet/src/hooks/useSpreadsheet.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpreadsheetContext = /*#__PURE__*/createContext();\nexport const useSpreadsheet = () => {\n  _s();\n  return useContext(SpreadsheetContext);\n};\n_s(useSpreadsheet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SpreadsheetProvider = ({\n  children\n}) => {\n  _s2();\n  const [cells, setCells] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [columnRules, setColumnRules] = useState({});\n  const updateCell = useCallback((cellId, updates) => {\n    setCells(prevCells => ({\n      ...prevCells,\n      [cellId]: {\n        ...prevCells[cellId],\n        ...updates\n      }\n    }));\n  }, []);\n  const formatCell = useCallback((property, value) => {\n    setCells(prevCells => {\n      const newCells = {\n        ...prevCells\n      };\n      Object.keys(newCells).forEach(cellId => {\n        if (newCells[cellId].selected) {\n          newCells[cellId] = {\n            ...newCells[cellId],\n            style: {\n              ...newCells[cellId].style,\n              [property]: value\n            }\n          };\n        }\n      });\n      return newCells;\n    });\n  }, []);\n  const setColumnRule = useCallback((column, rule) => {\n    setColumnRules(prevRules => ({\n      ...prevRules,\n      [column]: rule\n    }));\n  }, []);\n  const value = {\n    cells,\n    updateCell,\n    formatCell,\n    searchTerm,\n    setSearchTerm,\n    columnRules,\n    setColumnRule\n  };\n  return /*#__PURE__*/_jsxDEV(SpreadsheetContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s2(SpreadsheetProvider, \"ECeB19VMXdcJNBPoOVZTrZZL+90=\");\n_c = SpreadsheetProvider;\nvar _c;\n$RefreshReg$(_c, \"SpreadsheetProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","SpreadsheetContext","useSpreadsheet","_s","SpreadsheetProvider","children","_s2","cells","setCells","searchTerm","setSearchTerm","columnRules","setColumnRules","updateCell","cellId","updates","prevCells","formatCell","property","value","newCells","Object","keys","forEach","selected","style","setColumnRule","column","rule","prevRules","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/indrajeetyadav/my-spreadsheet/src/hooks/useSpreadsheet.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\n\nconst SpreadsheetContext = createContext();\n\nexport const useSpreadsheet = () => useContext(SpreadsheetContext);\n\nexport const SpreadsheetProvider = ({ children }) => {\n  const [cells, setCells] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [columnRules, setColumnRules] = useState({});\n\n  const updateCell = useCallback((cellId, updates) => {\n    setCells(prevCells => ({\n      ...prevCells,\n      [cellId]: { ...prevCells[cellId], ...updates }\n    }));\n  }, []);\n\n  const formatCell = useCallback((property, value) => {\n    setCells(prevCells => {\n      const newCells = { ...prevCells };\n      Object.keys(newCells).forEach(cellId => {\n        if (newCells[cellId].selected) {\n          newCells[cellId] = {\n            ...newCells[cellId],\n            style: { ...newCells[cellId].style, [property]: value }\n          };\n        }\n      });\n      return newCells;\n    });\n  }, []);\n\n  const setColumnRule = useCallback((column, rule) => {\n    setColumnRules(prevRules => ({ ...prevRules, [column]: rule }));\n  }, []);\n\n  const value = {\n    cells,\n    updateCell,\n    formatCell,\n    searchTerm,\n    setSearchTerm,\n    columnRules,\n    setColumnRule,\n  };\n\n  return (\n    <SpreadsheetContext.Provider value={value}>\n      {children}\n    </SpreadsheetContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,kBAAkB,CAAC;AAAA;AAACE,EAAA,CAAtDD,cAAc;AAE3B,OAAO,MAAME,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACnD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMgB,UAAU,GAAGf,WAAW,CAAC,CAACgB,MAAM,EAAEC,OAAO,KAAK;IAClDP,QAAQ,CAACQ,SAAS,KAAK;MACrB,GAAGA,SAAS;MACZ,CAACF,MAAM,GAAG;QAAE,GAAGE,SAAS,CAACF,MAAM,CAAC;QAAE,GAAGC;MAAQ;IAC/C,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,UAAU,GAAGnB,WAAW,CAAC,CAACoB,QAAQ,EAAEC,KAAK,KAAK;IAClDX,QAAQ,CAACQ,SAAS,IAAI;MACpB,MAAMI,QAAQ,GAAG;QAAE,GAAGJ;MAAU,CAAC;MACjCK,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,OAAO,CAACT,MAAM,IAAI;QACtC,IAAIM,QAAQ,CAACN,MAAM,CAAC,CAACU,QAAQ,EAAE;UAC7BJ,QAAQ,CAACN,MAAM,CAAC,GAAG;YACjB,GAAGM,QAAQ,CAACN,MAAM,CAAC;YACnBW,KAAK,EAAE;cAAE,GAAGL,QAAQ,CAACN,MAAM,CAAC,CAACW,KAAK;cAAE,CAACP,QAAQ,GAAGC;YAAM;UACxD,CAAC;QACH;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,aAAa,GAAG5B,WAAW,CAAC,CAAC6B,MAAM,EAAEC,IAAI,KAAK;IAClDhB,cAAc,CAACiB,SAAS,KAAK;MAAE,GAAGA,SAAS;MAAE,CAACF,MAAM,GAAGC;IAAK,CAAC,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMT,KAAK,GAAG;IACZZ,KAAK;IACLM,UAAU;IACVI,UAAU;IACVR,UAAU;IACVC,aAAa;IACbC,WAAW;IACXe;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,kBAAkB,CAAC6B,QAAQ;IAACX,KAAK,EAAEA,KAAM;IAAAd,QAAA,EACvCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAAC5B,GAAA,CA9CWF,mBAAmB;AAAA+B,EAAA,GAAnB/B,mBAAmB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}